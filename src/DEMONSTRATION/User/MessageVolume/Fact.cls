Include (%DeepSee, EnsUtil)

/// Fact table for cube 'MessageVolume'.<br/>
/// THIS IS A GENERATED CLASS, DO NOT EDIT.<br/>
/// Generated by %DeepSee.Generator:%CreateFactTable.
Class User.MessageVolume.Fact Extends (%DeepSee.FactTable, %DeepSee.CubeFunctionSet) [ Final, GeneratedBy = User.MessageVolume.CLS, Inheritance = right, Owner = {}, ProcedureBlock ]
{

/// Index for fact 2.
Index DxSourceConfigName On DxSourceConfigName [ Type = bitmap ];

/// Index for fact 3.
Index DxTargetConfigName On DxTargetConfigName [ Type = bitmap ];

/// Index for fact 4.
Index Dx2624988102 On Dx2624988102 [ Type = bitmap ];

/// Index for fact 5.
Index DxTimeProcessedFxHourNumber On DxTimeProcessedFxHourNumber [ Type = bitmap ];

/// Index for fact 6.
Index DxIsError On DxIsError [ Type = bitmap ];

/// Index for fact 7.
Index DxStatus On DxStatus [ Type = bitmap ];

/// Index for measure M1.
Index MxStatusN On MxStatusN [ Type = bitslice ];

/// Reference to original data in source table.
Property %sourceId As Ens.MessageHeader;

/// This indicates which partition (set of 1M) this fact is in.
Property %dspartition As %Integer [ Calculated, SqlComputeCode = {Set {%dspartition}=({ID}\1024000)+1}, SqlComputed ];

/// Dimension: DxTimeProcessed<br/>
/// Source: TimeProcessed
Property DxTimeProcessed As %DeepSee.Datatype.dateTime;

/// Dimension: DxSourceConfigName<br/>
/// Source: SourceConfigName
Property DxSourceConfigName As User.MessageVolume.StarSourceConfigName;

/// Dimension: DxTargetConfigName<br/>
/// Source: TargetConfigName
Property DxTargetConfigName As User.MessageVolume.StarTargetConfigName;

/// Dimension: Dx2624988102<br/>
/// Source: TimeProcessed
Property Dx2624988102 As %Library.String(COLLATION = "EXACT") [ Calculated, SqlComputeCode = {Set {Dx2624988102}=$S({DxTimeProcessed}="":"",{DxTimeProcessed}=$$$DeepSeeNullTimeMarker:$$$DeepSeeNullTimeMarker,1:{DxTimeProcessed}\1)}, SqlComputed ];

/// Dimension: DxTimeProcessedFxHourNumber<br/>
/// Source: TimeProcessed
Property DxTimeProcessedFxHourNumber As %Library.String(COLLATION = "EXACT") [ Calculated, SqlComputeCode = {Set {DxTimeProcessedFxHourNumber}=$S({DxTimeProcessed}="":"",{DxTimeProcessed}=$$$DeepSeeNullTimeMarker:$$$DeepSeeNullTimeMarker,1:(+$E($ZDT({DxTimeProcessed},3),12,13)))}, SqlComputed ];

/// Dimension: DxIsError<br/>
/// Source: IsError
Property DxIsError As User.MessageVolume.StarIsError;

/// Dimension: DxStatus<br/>
/// Source: Status
Property DxStatus As User.MessageVolume.StarStatus;

/// Measure: MxStatusN<br/>
/// Source: Status
Property MxStatusN As %Double(SCALE = 2);

/// Return the total number of items within the Fact table.<br/>
/// Generated by %DeepSee.Generator:%CreateFactTable.
ClassMethod %Count() As %Integer
{
 Set tCount = 0
 &sql(SELECT COUNT(*) INTO :tCount FROM User_MessageVolume.Fact)
 Quit tCount
}

/// Update a range of Facts with data from the source table row with ids from <var>pStartId</var> to <var>pEndId</var>.<br/>
/// Generated by %DeepSee.Generator:%CreateFactTable.<br/>
/// DO NOT CALL THIS METHOD DIRECTLY
ClassMethod %UpdateFacts(pStartId As %String, pEndId As %String, pBatchMode As %Boolean = 0, ByRef pChunks As %Integer, pVerbose As %Boolean = 0, pTaskGroup As %String = "", Output pUpdates As %Integer, pRefProp As %String = "", pRefID As %String = "", ByRef pDimTables, pFactList As %String = "") As %Status
{
 Set tSC = $$$OK
 Set tRS = ""
 New %var,%source,%ROWID,%msg,%dsSourceId,%dsSourceObj
 Try {
 Set tUseFactList = ($G(pFactList)'="")
 Set (SQLCODE,tStarId) = ""
 Set pUpdates = 0
 Set tLastCount = 0
 Set tUseFactList = ($G(pFactList)'="")
 Set tID = ""
 Set tRows = 0
 If (pEndId="") {
  Set:+$G(%dsReadCommitted,1) oldzu=$ZU(115,2,1)
  Set pEndId=pStartId
 }
 If (pRefProp'="") {
  Set tRS = ##class(%ResultSet).%New()
  Set tSC = tRS.Prepare("SELECT %ID,%EXTERNAL(IsError) ""DxIsError"",%EXTERNAL(SourceConfigName) ""DxSourceConfigName"",Status ""MxStatusN"",%EXTERNAL(Status) ""DxStatus"",%EXTERNAL(TargetConfigName) ""DxTargetConfigName"",TimeProcessed ""DxTimeProcessed"",%EXTERNAL(TimeProcessed) ""Dx2624988102"" FROM Ens.MessageHeader"_" WHERE "_pRefProp_"=?")
  If $$$ISERR(tSC) Quit
  Set tSC = tRS.Execute(pRefID)
  If $$$ISERR(tSC) Quit
 }
 ElseIf (pStartId=pEndId) {
  &sql(DECLARE sqeq756875581 CURSOR FOR
  SELECT %ID,%EXTERNAL(IsError) "DxIsError",%EXTERNAL(SourceConfigName) "DxSourceConfigName",Status "MxStatusN",%EXTERNAL(Status) "DxStatus",%EXTERNAL(TargetConfigName) "DxTargetConfigName",TimeProcessed "DxTimeProcessed",%EXTERNAL(TimeProcessed) "Dx2624988102" FROM Ens.MessageHeader
  WHERE %ID = :pStartId
  )
  &sql(OPEN sqeq756875581)
  If (SQLCODE'=0) {
   Set tSC = $$$ERROR($$$GeneralError,"Error opening SQL cursor: ("_$G(SQLCODE)_") "_$G(%msg))
   Quit
  }
  &sql(FETCH sqeq756875581 INTO :tID,:%var("DxIsError"),:%var("DxSourceConfigName"),:%var("MxStatusN"),:%var("DxStatus"),:%var("DxTargetConfigName"),:%var("DxTimeProcessed"),:%var("Dx2624988102"))
  If (SQLCODE'=0) {
    Set tSC = $$$ERROR($$$GeneralError,"Error fetching row: ("_$G(SQLCODE)_") "_$G(%msg))
    &sql(CLOSE sqeq756875581)
      Do ##class(%DeepSee.Utils).%LogBuildError("MESSAGEVOLUME",pStartId,tSC)
    Quit
  }
 }
 Else {
  &sql(DECLARE sq756875581 CURSOR FOR
  SELECT %ID,%EXTERNAL(IsError) "DxIsError",%EXTERNAL(SourceConfigName) "DxSourceConfigName",Status "MxStatusN",%EXTERNAL(Status) "DxStatus",%EXTERNAL(TargetConfigName) "DxTargetConfigName",TimeProcessed "DxTimeProcessed",%EXTERNAL(TimeProcessed) "Dx2624988102" FROM Ens.MessageHeader
  WHERE %ID BETWEEN :pStartId  AND :pEndId
  )
  &sql(OPEN sq756875581)
  If (SQLCODE'=0) {
   Set tSC = $$$ERROR($$$GeneralError,"Error opening SQL cursor: ("_$G(SQLCODE)_") "_$G(%msg))
   Quit
  }
  &sql(FETCH sq756875581 INTO :tID,:%var("DxIsError"),:%var("DxSourceConfigName"),:%var("MxStatusN"),:%var("DxStatus"),:%var("DxTargetConfigName"),:%var("DxTimeProcessed"),:%var("Dx2624988102"))
  If (SQLCODE'=0) {
    Set tSC = $$$ERROR($$$GeneralError,"Error fetching row: ("_$G(SQLCODE)_") "_$G(%msg))
    &sql(CLOSE sq756875581)
    If ($G(tID)'="") {
       Do ##class(%DeepSee.Utils).%LogBuildError("MESSAGEVOLUME",tID,tSC)
    }
    Quit
  }
 }
 While ($S($IsObject(tRS):tRS.Next(.tSC),1:SQLCODE=0)) {
 Try {
 If ($IsObject(tRS)) {
  If $$$ISERR(tSC) Quit
  Set tID = $G(tRS.Data("%ID"))
  Set %var("DxIsError") = $G(tRS.Data("DxIsError"))
  Set %var("DxSourceConfigName") = $G(tRS.Data("DxSourceConfigName"))
  Set %var("MxStatusN") = $G(tRS.Data("MxStatusN"))
  Set %var("DxStatus") = $G(tRS.Data("DxStatus"))
  Set %var("DxTargetConfigName") = $G(tRS.Data("DxTargetConfigName"))
  Set %var("DxTimeProcessed") = $G(tRS.Data("DxTimeProcessed"))
  Set %var("Dx2624988102") = $G(tRS.Data("Dx2624988102"))
 }

 #; apply date conversions
 Set %var("DxTimeProcessed") = ##class(%DeepSee.Utils).%ConvertDate(%var("DxTimeProcessed"),"TIMESTAMP")
 Set %dsSourceId = $G(tID)
 Set tExStartTime = $ZH
 Set x = $I(^IRIS.Temp.DeepSeeBuildStats($namespace,"MESSAGEVOLUME","expr"),$ZH-tExStartTime)

 #; invoke method to process this fact
 Set tFactId = ""
 Set tSC = ##class(User.MessageVolume.Fact).%ProcessFact(tID,pBatchMode,.%var,.tFactId,.tErrorMsg,.pDimTables,,pFactList,.tUpdater)
 If (tFactId'="") {
 If $$$ISOK(tSC) {
  Set pUpdates = pUpdates+1
  Set pChunks(tFactId\64000+1) = ""
 }
 ElseIf (pVerbose) {
  Write "Error filing row: ",tID,!
  Write:tErrorMsg'="" tErrorMsg,!
  Write $System.Status.GetOneStatusText(tSC),!!
  Set tSC = $$$OK
 }
 Kill pDimTables
 Set tRows = tRows + 1
 If (pVerbose&&'(tRows#1000)) Write $C(13,27)_"[0J"_"Building fact table: ",?25,$J($FN(tRows,",",0),10)," fact(s) updated."
 If (pVerbose&&'(tRows#1000)&&(+$G(%dserrcount))) Write " ",$J($FN(%dserrcount,",",0),10)," error(s)"
 If ((pTaskGroup'="")&&'(tRows#1000)) {
  Set tDelta = tRows - tLastCount
  Set inc=$I(^IRIS.Temp.DeepSeeUpdate($namespace,pTaskGroup,"facts"),tDelta)
  Set tLastCount = tRows
 }
 } ;factId
  }
  Catch (ex) {
    Set tSC = ex.AsStatus()
    If ($G(tID)'="") {
      Do ##class(%DeepSee.Utils).%LogBuildError("MESSAGEVOLUME",tID,tSC)
    }
  }
  If '$IsObject(tRS) {
   If (pStartId=pEndId) {
    &sql(FETCH sqeq756875581 INTO :tID,:%var("DxIsError"),:%var("DxSourceConfigName"),:%var("MxStatusN"),:%var("DxStatus"),:%var("DxTargetConfigName"),:%var("DxTimeProcessed"),:%var("Dx2624988102"))
   }
   Else {
    &sql(FETCH sq756875581 INTO :tID,:%var("DxIsError"),:%var("DxSourceConfigName"),:%var("MxStatusN"),:%var("DxStatus"),:%var("DxTargetConfigName"),:%var("DxTimeProcessed"),:%var("Dx2624988102"))
   }
  }
 } ;while
  If '$IsObject(tRS) {
   If (pStartId=pEndId) {
    &sql(CLOSE sqeq756875581)
   }
   Else {
    &sql(CLOSE sq756875581)
   }
  }
 If (pVerbose) Write $C(13,27)_"[0J"_"Building fact table: "_$FN(+$G(tRows),",",0)_" fact(s) updated"
 If (pTaskGroup'="") {
  Set tDelta = tRows - tLastCount
  Set inc=$I(^IRIS.Temp.DeepSeeUpdate($namespace,pTaskGroup,"facts"),tDelta)
 }
 }
 Catch(ex) {
  Set tSC = ex.AsStatus()
  &sql(CLOSE sqeq756875581)
  &sql(CLOSE sq756875581)
 }
  Set:$D(oldzu) zu=$ZU(115,2,oldzu)
 If ($$$ISERR(tSC)) {
  Do ..%LogError(tSC)
  If (pVerbose) {
   Do $System.Status.DisplayError(tSC)
  }
  If ($G(tID)'="") {
   Do ##class(%DeepSee.Utils).%LogBuildError("MESSAGEVOLUME",tID,tSC)
  }
 }
 Quit tSC
}

/// Update all Facts with data from the source table.<br/>
/// Generated by %DeepSee.Generator:%CreateFactTable.<br/>
/// DO NOT CALL THIS METHOD DIRECTLY
ClassMethod %BuildAllFacts(pVerbose As %Boolean = 0, pFactList As %String = "") As %Status
{
 Set tSC = $$$OK
 New %var,%source,%ROWID,%msg,%dsSourceId,%dsSourceObj
 Try {
 Set (SQLCODE,tStarId) = ""
 Set tLastCount = 0
 Set tID = ""
 Set tRows = 0
  Set tUseFactList = ($G(pFactList)'="")
  &sql(DECLARE sq2756875581 CURSOR FOR
  SELECT %ID,%EXTERNAL(IsError) "DxIsError",%EXTERNAL(SourceConfigName) "DxSourceConfigName",Status "MxStatusN",%EXTERNAL(Status) "DxStatus",%EXTERNAL(TargetConfigName) "DxTargetConfigName",TimeProcessed "DxTimeProcessed",%EXTERNAL(TimeProcessed) "Dx2624988102" FROM Ens.MessageHeader
  )
  &sql(OPEN sq2756875581)
  If (SQLCODE'=0) {
   Set tSC = $$$ERROR($$$GeneralError,"Error opening SQL cursor: ("_$G(SQLCODE)_") "_$G(%msg))
   Quit
  }
  &sql(FETCH sq2756875581 INTO :tID,:%var("DxIsError"),:%var("DxSourceConfigName"),:%var("MxStatusN"),:%var("DxStatus"),:%var("DxTargetConfigName"),:%var("DxTimeProcessed"),:%var("Dx2624988102"))
  If ((SQLCODE=100)&&pVerbose) {
   Write "No source data found.",!
  }
  While (SQLCODE=0) {
  If ($D(%dsmaxfacts)&&(tRows>=+$G(%dsmaxfacts))) Quit
  Try {

 #; apply date conversions
 Set %var("DxTimeProcessed") = ##class(%DeepSee.Utils).%ConvertDate(%var("DxTimeProcessed"),"TIMESTAMP")
 Set %dsSourceId = $G(tID)
 Set tExStartTime = $ZH
 Set x = $I(^IRIS.Temp.DeepSeeBuildStats($namespace,"MESSAGEVOLUME","expr"),$ZH-tExStartTime)

 #; invoke method to process this fact
 Set tFactId = ""
 Set tSC = ##class(User.MessageVolume.Fact).%ProcessFact(tID,1,.%var,.tFactId,.tErrorMsg,,,pFactList,.tUpdater)
 Set:$$$ISERR(tSC) err = $I(%dserrcount)
 If ($$$ISERR(tSC)&&pVerbose) {
  Write "Error filing row: ",tID,!
  Write:tErrorMsg'="" tErrorMsg,!
  Write $System.Status.GetOneStatusText(tSC),!!
  Set tSC = $$$OK
 }
 If (tFactId'="") {
  Set tRows = tRows + 1
  Set %dsfactcount = tRows
  If (pVerbose&&'(tRows#1000)) Write $C(13,27)_"[0J"_"Building fact table: ",?25,$J($FN(tRows,",",0),10)," fact(s) updated."
  If (pVerbose&&'(tRows#1000)&&(+$G(%dserrcount))) Write " ",$J($FN(%dserrcount,",",0),10)," error(s)"
 } ;factId
  }
  Catch (ex) {
    Set tSC = ex.AsStatus()
    If ($G(tID)'="") {
      Do ##class(%DeepSee.Utils).%LogBuildError("MESSAGEVOLUME",tID,tSC)
    }
  }
  &sql(FETCH sq2756875581 INTO :tID,:%var("DxIsError"),:%var("DxSourceConfigName"),:%var("MxStatusN"),:%var("DxStatus"),:%var("DxTargetConfigName"),:%var("DxTimeProcessed"),:%var("Dx2624988102"))
 } ;while
  &sql(CLOSE sq2756875581)
 If (pVerbose) Write $C(13,27)_"[0J"_"Building fact table: "_$FN(+$G(tRows),",",0)_" fact(s) updated"
 }
 Catch(ex) {
  Set tSC = ex.AsStatus()
  &sql(CLOSE sq2756875581)
 }
 If ($$$ISERR(tSC)) {
  Do ..%LogError(tSC)
  If (pVerbose) {
   Do $System.Status.DisplayError(tSC)
  }
  If ($G(tID)'="") {
   Do ##class(%DeepSee.Utils).%LogBuildError("MESSAGEVOLUME",tID,tSC)
  }
 }
 Quit tSC
}

/// Create a temp file of all source ids.<br/>
/// Generated by %DeepSee.Generator:%CreateFactTable.<br/>
/// DO NOT CALL THIS METHOD DIRECTLY
ClassMethod %BuildTempFile(pTempKey As %String, Output pImplemented As %Boolean, pVerbose As %Boolean = 0) As %Status
{
 Set tSC = $$$OK
 New %var,%source,%ROWID,%msg,%dsSourceId,%dsSourceObj
 Set pImplemented = 1
 Try {
 Set (SQLCODE,tStarId) = ""
 Kill $$$DeepSeeTempSourceId(pTempKey)
 Set tID = ""
 Set tRows = 0
 Set tUpdate = ..%Count()
  If tUpdate {
   Set %dsmaxfacts = tUpdate
   &sql(DECLARE sq3756875581 CURSOR FOR
   SELECT %sourceId FROM User_MessageVolume.Fact
   )
  }
  Else {
   &sql(DECLARE sq3756875581 CURSOR FOR
   SELECT %ID FROM Ens.MessageHeader
   )
  }
  &sql(OPEN sq3756875581)
  If (SQLCODE'=0) {
   Set tSC = $$$ERROR($$$GeneralError,"Error opening SQL cursor: ("_$G(SQLCODE)_") "_$G(%msg))
   Quit
  }
  &sql(FETCH sq3756875581 INTO :tID)
  If ((SQLCODE=100)&&pVerbose) {
   Write "No source data found.",!
  }
  While (SQLCODE=0) {
  Set tRows = tRows+1
  Set tChunk = tRows\64000+1
  Set tOffset = tRows#64000+1
  Set:tID'="" $$$DeepSeeTempSourceId(pTempKey,tChunk,tOffset) = $LB(tID,''tUpdate)
  If (pVerbose&&'(tRows#10000)) Write $C(13,27)_"[0J"_"Building temp file: ",?25,$J($FN(tRows,",",0),10)," record(s) processed."
  If ($D(%dsmaxfacts)&&(tRows>=+$G(%dsmaxfacts))) Quit
  &sql(FETCH sq3756875581 INTO :tID)
 } ;while
  &sql(CLOSE sq3756875581)
 If (pVerbose) Write $C(13,27)_"[0J"_"Building temp file: "_$FN(+$G(tRows),",",0)_" record(s) processed"
 }
 Catch(ex) {
  Set tSC = ex.AsStatus()
  &sql(CLOSE sq3756875581)
 }
 If ($$$ISERR(tSC)) {
  Do ..%LogError(tSC)
  If (pVerbose) {
   Do $System.Status.DisplayError(tSC)
  }
 }
 Quit tSC
}

/// Check for the existence of a single ID in the source table.<br/>
/// DO NOT CALL THIS METHOD DIRECTLY
ClassMethod %CheckSourceId(pTestId As %String, pVerbose As %Boolean = 0, Output pSC As %Status) As %Boolean
{
 // Method generation added by DTB422
 Set tSourceExists = 0
 Set pSC = $$$OK
 Try {
  &sql(SELECT COUNT(%ID) INTO :tExists FROM Ens.MessageHeader WHERE %ID = :pTestId)
  If (tExists) {
   Set tSourceExists = 1
  }
 }
 Catch(ex) {
  Set pSC = ex.AsStatus()
 }
 If ($$$ISERR(pSC)) {
  Do ..%LogError(pSC)
  If (pVerbose) {
   Do $System.Status.DisplayError(pSC)
  }
 }
 Quit tSourceExists
}

/// Perform the work of updating one fact in the cube.<br/>
/// Generated by %DeepSee.Generator:%CreateFactTable.<br/>
/// DO NOT CALL THIS METHOD DIRECTLY
ClassMethod %ProcessFact(pID As %String, pBatchMode As %Boolean = 0, ByRef %var As %String, ByRef pFactId As %Integer, Output pErrorMsg As %String, ByRef pDimTables, pDimensionsOnly As %Boolean = 0, pFactList As %String = "", ByRef pSQLUpdate As %SQL.StatementResult = {$$$NULLOREF}) As %Status
{
 Set tSC = $$$OK
 New %ROWID,%msg,%value,%source,%expression
 Try {
  Set (SQLCODE,tStarId) = ""
  Set pErrorMsg = ""
  Set pFactId = $G(pFactId)
  Set %value = ""

  // + DTB886 - Consult the pFactList. If defined, remove anything that is not in the list from %var
  // It is assumed that pFactList is a $lb in this method
  Set tLimitedList=0
  If (pFactList'="") {
    Set tLimitedList = 1
    Set pBatchMode = 0
    Merge tOriginalVar = %var
    Set tFact = $O(%var(""))
    While (tFact'="") {
      Kill:'$ListFind(pFactList,tFact) %var(tFact)
      Set tFact = $O(%var(tFact))
    }
  }
  If tLimitedList {
    If '$G($$$DeepSeeMetaGLVN("cubes","MESSAGEVOLUME","namedFactNums")) {
      Set tSC = $$$ERROR($$$GeneralError,"Cube 'MESSAGEVOLUME' does not support updates using a fact list.")
      Quit
    }
  }
  // - DTB886

  #; apply null replacements
  Set:$D(%var("DxIsError"))&&(($G(%var("DxIsError"))="")||($G(%var("DxIsError"))=$C(0))) %var("DxIsError") = "<null>"
  Set:$D(%var("DxSourceConfigName"))&&(($G(%var("DxSourceConfigName"))="")||($G(%var("DxSourceConfigName"))=$C(0))) %var("DxSourceConfigName") = "<null>"
  Set:$D(%var("DxStatus"))&&(($G(%var("DxStatus"))="")||($G(%var("DxStatus"))=$C(0))) %var("DxStatus") = "<null>"
  Set:$D(%var("DxTargetConfigName"))&&(($G(%var("DxTargetConfigName"))="")||($G(%var("DxTargetConfigName"))=$C(0))) %var("DxTargetConfigName") = "<null>"

  If (pDimensionsOnly) {
   Set tFactId=""
   Set tIsInsert = 1
  }
  ElseIf (pBatchMode) {
   Set zuSetting = $zu(115,1,0)
   Set tIsInsert = 1
  }
  ElseIf (pID'="") {
   Set tFactId = $O($$$DeepSeeIndexGLVN("MESSAGEVOLUME","%sourceId",pID,""))
   Set tIsInsert = ''(tFactId="")
  }
  ElseIf (pFactId'="") {
   If ($D($$$DeepSeeIndexGLVN("MESSAGEVOLUME","%sourceIdReverse",pFactId))) {
    Set tFactId = pFactId
    Set tIsInsert = 0
   }
   Else {
    Set tFactId = ""
    Set tIsInsert = 1
   }
  }
  Else {
   Set tFactId = ""
   Set tIsInsert = 1
  }

  If ('pBatchMode && tLimitedList && tIsInsert) {
    Quit
  }

 #; STAR Table: User.MessageVolume.StarIsError
 If ($G(%var("DxIsError"))'="") {
  Set tStarId = $O(^DeepSee.DimensionI("USER.MESSAGEVOLUME.STARISERROR","Primary",$zu(28,$G(%var("DxIsError")),7,113),""))
  If (tStarId '= "") {
   Set %var("DxIsError") = tStarId
  }
  Else {
  Set tLockKey = $zu(28,%var("DxIsError"),7,113)
  Lock +$$$DeepSeeIndexGLVN("User.MessageVolume.StarIsError",tLockKey):15
  If '$Test {
   Set tSC = $$$ERROR($$$GeneralError,"Unable to acquire lock for dimension table: 'User_MessageVolume.StarIsError'")
   Quit
  }
  Set tStarId = $O(^DeepSee.DimensionI("USER.MESSAGEVOLUME.STARISERROR","Primary",$zu(28,$G(%var("DxIsError")),7,113),""))
   If (tStarId '= "") {
    Set %var("DxIsError") = tStarId
   }
   Else {
    &sql(INSERT INTO User_MessageVolume.StarIsError (DxIsError) VALUES (:%var("DxIsError")))
    If (SQLCODE'=0) {
     Lock -$$$DeepSeeIndexGLVN("User.MessageVolume.StarIsError",tLockKey)
     Set tSC = $$$ERROR($$$GeneralError,"Insert into dimension table failed: 'User_MessageVolume.StarIsError' SQLCODE="_SQLCODE)
     Quit
    }
    Set %var("DxIsError") = %ROWID
   }
   Lock -$$$DeepSeeIndexGLVN("User.MessageVolume.StarIsError",tLockKey)
  }
 }

 #; STAR Table: User.MessageVolume.StarSourceConfigName
 If ($G(%var("DxSourceConfigName"))'="") {
  Set tStarId = $O(^DeepSee.DimensionI("USER.MESSAGEVOLUME.STARSOURCECONFIGNAME","Primary",$zu(28,$G(%var("DxSourceConfigName")),7,113),""))
  If (tStarId '= "") {
   Set %var("DxSourceConfigName") = tStarId
  }
  Else {
  Set tLockKey = $zu(28,%var("DxSourceConfigName"),7,113)
  Lock +$$$DeepSeeIndexGLVN("User.MessageVolume.StarSourceConfigName",tLockKey):15
  If '$Test {
   Set tSC = $$$ERROR($$$GeneralError,"Unable to acquire lock for dimension table: 'User_MessageVolume.StarSourceConfigName'")
   Quit
  }
  Set tStarId = $O(^DeepSee.DimensionI("USER.MESSAGEVOLUME.STARSOURCECONFIGNAME","Primary",$zu(28,$G(%var("DxSourceConfigName")),7,113),""))
   If (tStarId '= "") {
    Set %var("DxSourceConfigName") = tStarId
   }
   Else {
    &sql(INSERT INTO User_MessageVolume.StarSourceConfigName (DxSourceConfigName) VALUES (:%var("DxSourceConfigName")))
    If (SQLCODE'=0) {
     Lock -$$$DeepSeeIndexGLVN("User.MessageVolume.StarSourceConfigName",tLockKey)
     Set tSC = $$$ERROR($$$GeneralError,"Insert into dimension table failed: 'User_MessageVolume.StarSourceConfigName' SQLCODE="_SQLCODE)
     Quit
    }
    Set %var("DxSourceConfigName") = %ROWID
   }
   Lock -$$$DeepSeeIndexGLVN("User.MessageVolume.StarSourceConfigName",tLockKey)
  }
 }

 #; STAR Table: User.MessageVolume.StarStatus
 If ($G(%var("DxStatus"))'="") {
  Set tStarId = $O(^DeepSee.DimensionI("USER.MESSAGEVOLUME.STARSTATUS","Primary",$zu(28,$G(%var("DxStatus")),7,113),""))
  If (tStarId '= "") {
   Set %var("DxStatus") = tStarId
  }
  Else {
  Set tLockKey = $zu(28,%var("DxStatus"),7,113)
  Lock +$$$DeepSeeIndexGLVN("User.MessageVolume.StarStatus",tLockKey):15
  If '$Test {
   Set tSC = $$$ERROR($$$GeneralError,"Unable to acquire lock for dimension table: 'User_MessageVolume.StarStatus'")
   Quit
  }
  Set tStarId = $O(^DeepSee.DimensionI("USER.MESSAGEVOLUME.STARSTATUS","Primary",$zu(28,$G(%var("DxStatus")),7,113),""))
   If (tStarId '= "") {
    Set %var("DxStatus") = tStarId
   }
   Else {
    &sql(INSERT INTO User_MessageVolume.StarStatus (DxStatus) VALUES (:%var("DxStatus")))
    If (SQLCODE'=0) {
     Lock -$$$DeepSeeIndexGLVN("User.MessageVolume.StarStatus",tLockKey)
     Set tSC = $$$ERROR($$$GeneralError,"Insert into dimension table failed: 'User_MessageVolume.StarStatus' SQLCODE="_SQLCODE)
     Quit
    }
    Set %var("DxStatus") = %ROWID
   }
   Lock -$$$DeepSeeIndexGLVN("User.MessageVolume.StarStatus",tLockKey)
  }
 }

 #; STAR Table: User.MessageVolume.StarTargetConfigName
 If ($G(%var("DxTargetConfigName"))'="") {
  Set tStarId = $O(^DeepSee.DimensionI("USER.MESSAGEVOLUME.STARTARGETCONFIGNAME","Primary",$zu(28,$G(%var("DxTargetConfigName")),7,113),""))
  If (tStarId '= "") {
   Set %var("DxTargetConfigName") = tStarId
  }
  Else {
  Set tLockKey = $zu(28,%var("DxTargetConfigName"),7,113)
  Lock +$$$DeepSeeIndexGLVN("User.MessageVolume.StarTargetConfigName",tLockKey):15
  If '$Test {
   Set tSC = $$$ERROR($$$GeneralError,"Unable to acquire lock for dimension table: 'User_MessageVolume.StarTargetConfigName'")
   Quit
  }
  Set tStarId = $O(^DeepSee.DimensionI("USER.MESSAGEVOLUME.STARTARGETCONFIGNAME","Primary",$zu(28,$G(%var("DxTargetConfigName")),7,113),""))
   If (tStarId '= "") {
    Set %var("DxTargetConfigName") = tStarId
   }
   Else {
    &sql(INSERT INTO User_MessageVolume.StarTargetConfigName (DxTargetConfigName) VALUES (:%var("DxTargetConfigName")))
    If (SQLCODE'=0) {
     Lock -$$$DeepSeeIndexGLVN("User.MessageVolume.StarTargetConfigName",tLockKey)
     Set tSC = $$$ERROR($$$GeneralError,"Insert into dimension table failed: 'User_MessageVolume.StarTargetConfigName' SQLCODE="_SQLCODE)
     Quit
    }
    Set %var("DxTargetConfigName") = %ROWID
   }
   Lock -$$$DeepSeeIndexGLVN("User.MessageVolume.StarTargetConfigName",tLockKey)
  }
 }
 If ('pBatchMode) {
    Set tVal = $G(%var("DxSourceConfigName"))
    If ((tVal'="")&&('$D($$$DeepSeeIndexGLVN("MESSAGEVOLUME",2,tVal)))) {
     Set ts = $I($$$DeepSeeResultsGLVN("MESSAGEVOLUME","fact",2))
    }
    Set tVal = $G(%var("DxTargetConfigName"))
    If ((tVal'="")&&('$D($$$DeepSeeIndexGLVN("MESSAGEVOLUME",3,tVal)))) {
     Set ts = $I($$$DeepSeeResultsGLVN("MESSAGEVOLUME","fact",3))
    }
    Set tVal = ##class(%DeepSee.Time.DayMonthYear).%Convert($G(%var("DxTimeProcessed")))
    If ((tVal'="")&&('$D($$$DeepSeeIndexGLVN("MESSAGEVOLUME",4,tVal)))) {
     Set ts = $I($$$DeepSeeResultsGLVN("MESSAGEVOLUME","fact",4))
    }
    Set tVal = ##class(%DeepSee.Time.HourNumber).%Convert($G(%var("DxTimeProcessed")))
    If ((tVal'="")&&('$D($$$DeepSeeIndexGLVN("MESSAGEVOLUME",5,tVal)))) {
     Set ts = $I($$$DeepSeeResultsGLVN("MESSAGEVOLUME","fact",5))
    }
    Set tVal = $G(%var("DxIsError"))
    If ((tVal'="")&&('$D($$$DeepSeeIndexGLVN("MESSAGEVOLUME",6,tVal)))) {
     Set ts = $I($$$DeepSeeResultsGLVN("MESSAGEVOLUME","fact",6))
    }
    Set tVal = $G(%var("DxStatus"))
    If ((tVal'="")&&('$D($$$DeepSeeIndexGLVN("MESSAGEVOLUME",7,tVal)))) {
     Set ts = $I($$$DeepSeeResultsGLVN("MESSAGEVOLUME","fact",7))
    }
 }

 #; INSERT or UPDATE data into fact table
 // DTB886 - Build these for relevant cases below.
 Set tListINTO = "%sourceId"
 Set tListParameters = "?"
 Set tListVALUES($I(tListVALUES)) = pID
 Set tFact = $O(%var(""))
 While (tFact'="") {
   Set tListINTO = tListINTO _ $S($L(tListINTO):",",1:"") _ tFact
   Set tListParameters = tListParameters _ $S($L(tListParameters):",",1:"") _ "?"
   Set tListVALUES($I(tListVALUES)) = $G(%var(tFact))
   Set tFact = $O(%var(tFact))
 }
 Set:'tIsInsert tListVALUES($I(tListVALUES)) = tFactId

 If (pDimensionsOnly) {
 }
 ElseIf (pBatchMode) {
  If tLimitedList {
    // DTB886 - Handle a defined incoming pFactList. This forces use of dynamic SQL and has trimmed the available %var
    If '$IsObject(pSQLUpdate) {
    	Set tSQL = "INSERT %NOLOCK %NOINDEX INTO User_MessageVolume.Fact ("_tListINTO_") VALUES ("_tListParameters_")"

    	Set pSQLUpdate = ##class(%SQL.Statement).%New()
    	Set tSC = pSQLUpdate.%Prepare(tSQL)
    	If $$$ISERR(tSC) Quit
    }
    Set tListResult = pSQLUpdate.%Execute(tListVALUES...)

    Set pFactId = tListResult.%ROWID
    Set SQLCODE = tListResult.%SQLCODE
  }
  Else {
    &sql(INSERT %NOLOCK %NOINDEX INTO User_MessageVolume.Fact (%sourceId,DxIsError,DxSourceConfigName,DxStatus,DxTargetConfigName,DxTimeProcessed,MxStatusN)
         VALUES (:pID,:%var("DxIsError"),:%var("DxSourceConfigName"),:%var("DxStatus"),:%var("DxTargetConfigName"),:%var("DxTimeProcessed"),:%var("MxStatusN")))
    Set pFactId = %ROWID
  }
  If (pFactId'="") {
    Set:pID'="" $$$DeepSeeIndexGLVN("MESSAGEVOLUME","%sourceId",pID,pFactId) = ""
    Set $$$DeepSeeIndexGLVN("MESSAGEVOLUME","%sourceIdReverse",pFactId) = pID
  }
 }
 Else {
  If ($G(tFactId)'="") {
   If tLimitedList {
    // DTB886 - Handle a defined incoming pFactList. This forces use of dynamic SQL and has trimmed the available %var
    If '$IsObject(pSQLUpdate) {
    	Set tSQL = "UPDATE User_MessageVolume.Fact ("_tListINTO_") VALUES ("_tListParameters_") WHERE %ID = ?"

    	Set pSQLUpdate = ##class(%SQL.Statement).%New()
    	Set tSC = pSQLUpdate.%Prepare(tSQL)
    	If $$$ISERR(tSC) Quit
    }
    Set tListResult = pSQLUpdate.%Execute(tListVALUES...)

    Set pFactId = tFactId
    Set SQLCODE = tListResult.%SQLCODE
   }
   Else {
    &sql(UPDATE User_MessageVolume.Fact (%sourceId,DxIsError,DxSourceConfigName,DxStatus,DxTargetConfigName,DxTimeProcessed,MxStatusN)
         VALUES (:pID,:%var("DxIsError"),:%var("DxSourceConfigName"),:%var("DxStatus"),:%var("DxTargetConfigName"),:%var("DxTimeProcessed"),:%var("MxStatusN")) WHERE %ID = :tFactId)
    Set pFactId = tFactId
   }
  }
  Else {
   If tLimitedList {
     // DTB886 - Handle a defined incoming pFactList. This forces use of dynamic SQL and has trimmed the available %var
    If '$IsObject(pSQLUpdate) {
    	Set tSQL = "INSERT INTO User_MessageVolume.Fact ("_tListINTO_") VALUES ("_tListParameters_")"

    	Set pSQLUpdate = ##class(%SQL.Statement).%New()
    	Set tSC = pSQLUpdate.%Prepare(tSQL)
    	If $$$ISERR(tSC) Quit
    }
    Set tListResult = pSQLUpdate.%Execute(tListVALUES...)

    Set pFactId = tListResult.%ROWID
    Set SQLCODE = tListResult.%SQLCODE
   }
   Else {
     &sql(INSERT INTO User_MessageVolume.Fact (%sourceId,DxIsError,DxSourceConfigName,DxStatus,DxTargetConfigName,DxTimeProcessed,MxStatusN)
          VALUES (:pID,:%var("DxIsError"),:%var("DxSourceConfigName"),:%var("DxStatus"),:%var("DxTargetConfigName"),:%var("DxTimeProcessed"),:%var("MxStatusN")))
     Set pFactId = %ROWID
   }
  }
  If (pFactId'="") {
    Set:pID'="" $$$DeepSeeIndexGLVN("MESSAGEVOLUME","%sourceId",pID,pFactId) = ""
    Set $$$DeepSeeIndexGLVN("MESSAGEVOLUME","%sourceIdReverse",pFactId) = pID
  }
 }
 If (SQLCODE'=0) {
  Set pErrorMsg = $G(%msg)
  Set tSC = $$$ERROR($$$GeneralError,"Error inserting/updating fact: (Source ID:'"_pID_"') "_pErrorMsg)
 }
 }
 Catch(ex) {
  Set tSC = ex.AsStatus()
  Set pErrorMsg = $ZE
 }
 Set:$D(zuSetting) zuSetting = $zu(115,1,zuSetting)

 // DTB886 - Restore original %var if it was trimmed by pFactList
 Merge %var=tOriginalVar

 If $$$ISERR(tSC) {
  Do ..%LogError(tSC)
  If ($G(pID)'="") {
  Do ##class(%DeepSee.Utils).%LogBuildError("MESSAGEVOLUME",pID,tSC)
 }
 }
 Quit tSC
}

/// Notification that a batch of facts are about to be processed.<br/>
/// Generated by %DeepSee.Generator:%CreateFactTable.<br/>
/// DO NOT CALL THIS METHOD DIRECTLY
ClassMethod %OnStartBatch(pCubeName As %String, pVerbose As %Boolean = 0) As %Status
{
 Quit $$$OK
}

/// Notification that a batch of facts have just been processed.<br/>
/// Generated by %DeepSee.Generator:%CreateFactTable.<br/>
/// DO NOT CALL THIS METHOD DIRECTLY
ClassMethod %OnEndBatch(pCubeName As %String, pVerbose As %Boolean = 0) As %Status
{
 Quit $$$OK
}

/// Perform the work of injecting one fact into the cube without associated source data.<br/>
/// Generated by %DeepSee.Generator:%CreateFactTable.<br/>
/// DO NOT CALL THIS METHOD DIRECTLY
ClassMethod %InjectFact(ByRef pFactId As %Integer, ByRef pValues As %String, Output pChunks As %Integer, pDimensionsOnly As %Boolean = 0, pFactList As %String = "") As %Status
{
 New %var,%source,%value
 Set tSC = $$$OK
 Try {
  Set %value=""
  Set %var("DxIsError") = $G(pValues("IsError~~EXTERNAL"),$G(pValues("IsError")))
  Set %var("DxSourceConfigName") = $G(pValues("SourceConfigName~~EXTERNAL"),$G(pValues("SourceConfigName")))
  Set %var("MxStatusN") = $G(pValues("Status"))
  Set %var("DxStatus") = $G(pValues("Status~~EXTERNAL"),$G(pValues("Status")))
  Set %var("DxTargetConfigName") = $G(pValues("TargetConfigName~~EXTERNAL"),$G(pValues("TargetConfigName")))
  Set %var("DxTimeProcessed") = $G(pValues("TimeProcessed"))
  Set %var("Dx2624988102") = $G(pValues("TimeProcessed~~EXTERNAL"),$G(pValues("TimeProcessed")))
  Set tUseFactList = ($G(pFactList)'="")

  #; apply date conversions
  Set %var("DxTimeProcessed") = ##class(%DeepSee.Utils).%ConvertDate(%var("DxTimeProcessed"),"TIMESTAMP")

  #; invoke method to process this fact
  Set pFactId = $G(pFactId)
  Set tSC = ##class(User.MessageVolume.Fact).%ProcessFact("",0,.%var,.pFactId,.pErrorMsg,,pDimensionsOnly,pFactList,.tUpdater)
  If $$$ISOK(tSC) {
   Set:(pFactId'="")&&('pDimensionsOnly) pChunks(pFactId\64000+1) = ""
  }
 }
 Catch(ex) {
  Set tSC = ex.AsStatus()
  Do ..%LogError(tSC)
 }
 Quit tSC
}

/// Perform the work of deleting one fact in the cube.<br/>
/// Generated by %DeepSee.Generator:%CreateFactTable.<br/>
/// DO NOT CALL THIS METHOD DIRECTLY
ClassMethod %DeleteFact(pID As %String, Output pFactId As %Integer, Output pErrorMsg As %String) As %Status
{
 Set tSC = $$$OK
 New %ROWID,%msg
 Try {
  Set (SQLCODE,tStarId) = ""
  Set pErrorMsg = ""
  Set pFactId = ""
  Set pFactId = $O($$$DeepSeeIndexGLVN("MESSAGEVOLUME","%sourceId",pID,""))
  If (pFactId'="") {
   &sql(DELETE FROM User_MessageVolume.Fact WHERE %ID = :pFactId)
   Kill $$$DeepSeeIndexGLVN("MESSAGEVOLUME","%sourceId",pID,pFactId)
   Kill $$$DeepSeeIndexGLVN("MESSAGEVOLUME","%sourceIdReverse",pFactId)
  }
 }
 Catch(ex) {
  Set tSC = ex.AsStatus()
  Set pErrorMsg = $ZE
  Do ..%LogError(tSC)
 }
 Quit tSC
}

/// Notification that this cube is being killed.<br/>
/// Generated by %DeepSee.Generator:%CreateFactTable.<br/>
/// DO NOT CALL THIS METHOD DIRECTLY
ClassMethod %OnKillFacts() As %Status
{
 Set tSC = $$$OK
 Try {
 }
 Catch(ex) {
  Set tSC = ex.AsStatus()
  Do ..%LogError(tSC)
 }
 Quit tSC
}

/// Pre-compute certain aggregates.<br/>
/// Generated by %DeepSee.Generator:%CreateFactTable.<br/>
/// DO NOT CALL THIS METHOD DIRECTLY
ClassMethod %PrecomputeAggregates(pStartChunk As %Integer, pEndChunk As %Integer, pAggGLVN As %String, pVerbose As %Boolean = 0, pTaskGroup As %String = "", ByRef pCount As %Integer = 0) As %Status
{
 Set tSC = $$$OK
 New %ROWID,%msg,%var
 Kill @pAggGLVN
 Try {
  Set (SQLCODE) = ""
  Set tLastCount = 0
 If (pTaskGroup'="") {
  Set tDelta = pCount - tLastCount
  Set inc=$I(^IRIS.Temp.DeepSeeUpdate($namespace,pTaskGroup,"facts"),tDelta)
 }
 }
 Catch(ex) {
  Set tSC = ex.AsStatus()
  Set pErrorMsg = $ZE
  Do ..%LogError(tSC)
 }
 Quit tSC
}

Parameter BITMAPCHUNKINMEMORY = 0;

Parameter CUBENAME = "MessageVolume";

Parameter SOURCECLASS = "Ens.MessageHeader";

ForeignKey DxIsError(DxIsError) References User.MessageVolume.StarIsError() [ NoCheck ];

ForeignKey DxSourceConfigName(DxSourceConfigName) References User.MessageVolume.StarSourceConfigName() [ NoCheck ];

ForeignKey DxStatus(DxStatus) References User.MessageVolume.StarStatus() [ NoCheck ];

ForeignKey DxTargetConfigName(DxTargetConfigName) References User.MessageVolume.StarTargetConfigName() [ NoCheck ];

Storage Default
{
<Data name="FactDefaultData">
<Value name="1">
<Value>%sourceId</Value>
</Value>
<Value name="2">
<Value>DxTimeProcessed</Value>
</Value>
<Value name="3">
<Value>DxSourceConfigName</Value>
</Value>
<Value name="4">
<Value>DxTargetConfigName</Value>
</Value>
<Value name="5">
<Value>DxIsError</Value>
</Value>
<Value name="6">
<Value>DxStatus</Value>
</Value>
<Value name="7">
<Value>MxStatusN</Value>
</Value>
</Data>
<DataLocation>^DeepSee.Fact("USER.MESSAGEVOLUME.FACT")</DataLocation>
<DefaultData>FactDefaultData</DefaultData>
<ExtentSize>10000000</ExtentSize>
<IdLocation>^DeepSee.Fact("USER.MESSAGEVOLUME.FACT")</IdLocation>
<Index name="$Fact">
<Location>^DeepSee.Index("MESSAGEVOLUME","$Fact")</Location>
</Index>
<Index name="Dx2624988102">
<Location>^DeepSee.Index("MESSAGEVOLUME",4)</Location>
</Index>
<Index name="DxIsError">
<Location>^DeepSee.Index("MESSAGEVOLUME",6)</Location>
</Index>
<Index name="DxSourceConfigName">
<Location>^DeepSee.Index("MESSAGEVOLUME",2)</Location>
</Index>
<Index name="DxStatus">
<Location>^DeepSee.Index("MESSAGEVOLUME",7)</Location>
</Index>
<Index name="DxTargetConfigName">
<Location>^DeepSee.Index("MESSAGEVOLUME",3)</Location>
</Index>
<Index name="DxTimeProcessedFxHourNumber">
<Location>^DeepSee.Index("MESSAGEVOLUME",5)</Location>
</Index>
<Index name="MxStatusN">
<Location>^DeepSee.Index("MESSAGEVOLUME","M1")</Location>
</Index>
<IndexLocation>^User.MessageVolume.FactI</IndexLocation>
<StreamLocation>^DeepSee.FactS("USER.MESSAGEVOLUME.FACT")</StreamLocation>
<Type>%Storage.Persistent</Type>
}

}
