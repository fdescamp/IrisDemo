ROUTINE Hospital.FromEpicOrdersRoutingRule.1 [Type=INT,Generated]
 ;Hospital.FromEpicOrdersRoutingRule.1
 ;Generated for class Hospital.FromEpicOrdersRoutingRule.  Do NOT edit. 08/13/2020 09:37:08AM
 ;;7A4B4479;Hospital.FromEpicOrdersRoutingRule
 ;
zevaluateRuleDefinition(pContext,pRuleSet,pEffectiveBegin,pEffectiveEnd,pReturnValue,pReason,pLogLevel,pDebugId="") public { s:'($d(pLogLevel)#2) pLogLevel="r"
    set tSC=1,$ZE=""
    try {
        set pReturnValue="",pReason=""
        ; Initialize temporary variables
        ; No ruleSet dispatching code generated.
        set pEffectiveBegin=""
        set pEffectiveEnd=""
        set pRuleSet=""
        ;
ruleSet1 ; effectiveBegin = (not-specified); effectiveEnd = (not-specified)
        if (pLogLevel [ "c") set tSC = ##class(Ens.Rule.DebugLog).Log(pDebugId,"c","","Executing ruleSet1: effectiveBegin = (not-specified); effectiveEnd = (not-specified)",0) quit:('tSC)
        ;
        ; Evaluating rule: rule#1
        kill tConstraints
        set tSC=##class(EnsLib.HL7.MsgRouter.RuleAssist).RuntimeConstraintCheck(.tConstraints,pContext,.pPassed) quit:('tSC)
        if (pLogLevel [ "c") set tSC = ##class(Ens.Rule.DebugLog).Log(pDebugId,"c","rule#1","Constraints for rule 'rule#1' "_$select(pPassed: "passed",1: "failed"),0) quit:('tSC)
        if pPassed {
        }
        quit
        ;
    } catch err {
        if $ZE="" {set tSC=err.AsStatus()} Else {set tSC=##class(Ens.Util.Error).ExceptionStatus()}
    }
    set pReason=$e(pReason,2,*)
    quit tSC
    ;
}