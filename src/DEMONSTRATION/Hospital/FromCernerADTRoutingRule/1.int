ROUTINE Hospital.FromCernerADTRoutingRule.1 [Type=INT,Generated]
 ;Hospital.FromCernerADTRoutingRule.1
 ;Generated for class Hospital.FromCernerADTRoutingRule.  Do NOT edit. 08/13/2020 09:37:08AM
 ;;65585755;Hospital.FromCernerADTRoutingRule
 ;
zevaluateRuleDefinition(pContext,pRuleSet,pEffectiveBegin,pEffectiveEnd,pReturnValue,pReason,pLogLevel,pDebugId="") public { s:'($d(pLogLevel)#2) pLogLevel="r"
    set tSC=1,$ZE=""
    try {
        set pReturnValue="",pReason=""
        ; Initialize temporary variables
        ; No ruleSet dispatching code generated.
        set pEffectiveBegin=""
        set pEffectiveEnd=""
        set pRuleSet=""
        ;
ruleSet1 ; effectiveBegin = (not-specified); effectiveEnd = (not-specified)
        if (pLogLevel [ "c") set tSC = ##class(Ens.Rule.DebugLog).Log(pDebugId,"c","","Executing ruleSet1: effectiveBegin = (not-specified); effectiveEnd = (not-specified)",0) quit:('tSC)
        ;
        ; Evaluating rule: rule#1(ADT vers Lab)
        kill tConstraints
        set tConstraints("source")="Gestion Administrative"
        set tConstraints("docCategory")="2.4"
        set tConstraints("docName")="ADT_A01,ADT_A08,ADT_A04,ADT_A05"
        set tSC=##class(EnsLib.HL7.MsgRouter.RuleAssist).RuntimeConstraintCheck(.tConstraints,pContext,.pPassed) quit:('tSC)
        if (pLogLevel [ "c") set tSC = ##class(Ens.Rule.DebugLog).Log(pDebugId,"c","rule#1(ADT vers Lab)","Constraints for rule 'ADT vers Lab' "_$select(pPassed: "passed",1: "failed"),0) quit:('tSC)
        if pPassed {
            if (((pContext.HL7.GetValueAt("PV1:PatientClass"))'=("O"))) {
                set pReason=pReason_",rule#1(ADT vers Lab):when#1"
                if (pLogLevel [ "c") set tSC = ##class(Ens.Rule.DebugLog).Log(pDebugId,"c","rule#1(ADT vers Lab):when#1","When (HL7.{PV1:PatientClass}!=""O"") succeeded",0) quit:('tSC)
                set pReturnValue=pReturnValue_$s(pReturnValue'="":";",1:"")_"send:Laboratoire,TrakCare_TCP,Radiologie:LookupSample.LookupSampleDTL"
            } elseif (pLogLevel [ "c") {
                set tSC = ##class(Ens.Rule.DebugLog).Log(pDebugId,"c","rule#1(ADT vers Lab)","For rule 'ADT vers Lab', no whens matched and no otherwise defined",0) quit:('tSC)
            }
        }
        ; Evaluating rule: rule#2(ADT vers Radiologie)
        kill tConstraints
        set tConstraints("source")="Gestion Administrative"
        set tConstraints("docCategory")="2.4"
        set tConstraints("docName")="ADT_A01,ADT_A08,ADT_A02,ADT_A04"
        set tSC=##class(EnsLib.HL7.MsgRouter.RuleAssist).RuntimeConstraintCheck(.tConstraints,pContext,.pPassed) quit:('tSC)
        if (pLogLevel [ "c") set tSC = ##class(Ens.Rule.DebugLog).Log(pDebugId,"c","rule#2(ADT vers Radiologie)","Constraints for rule 'ADT vers Radiologie' "_$select(pPassed: "passed",1: "failed"),0) quit:('tSC)
        if pPassed {
            if ((1)) {
                set pReason=pReason_",rule#2(ADT vers Radiologie):when#1"
                if (pLogLevel [ "c") set tSC = ##class(Ens.Rule.DebugLog).Log(pDebugId,"c","rule#2(ADT vers Radiologie):when#1","When (1) succeeded",0) quit:('tSC)
                set pReturnValue=pReturnValue_$s(pReturnValue'="":";",1:"")_"send:Pharmacie:"
            } elseif (pLogLevel [ "c") {
                set tSC = ##class(Ens.Rule.DebugLog).Log(pDebugId,"c","rule#2(ADT vers Radiologie)","For rule 'ADT vers Radiologie', no whens matched and no otherwise defined",0) quit:('tSC)
            }
        }
        ; Evaluating rule: rule#3(ADT vers Dictaphone)
        kill tConstraints
        set tConstraints("source")="Gestion Administrative"
        set tConstraints("docCategory")="2.4"
        set tConstraints("docName")="ADT_A01,ADT_A08"
        set tSC=##class(EnsLib.HL7.MsgRouter.RuleAssist).RuntimeConstraintCheck(.tConstraints,pContext,.pPassed) quit:('tSC)
        if (pLogLevel [ "c") set tSC = ##class(Ens.Rule.DebugLog).Log(pDebugId,"c","rule#3(ADT vers Dictaphone)","Constraints for rule 'ADT vers Dictaphone' "_$select(pPassed: "passed",1: "failed"),0) quit:('tSC)
        if pPassed {
            if (((##class(Ens.Rule.FunctionSet).In((pContext.HL7.GetValueAt("PV1:PatientClass")),("I,E,O"))||(##class(Ens.Rule.FunctionSet).StartsWith((pContext.HL7.GetValueAt("PV1:PatientClass")),("I"))&&((pContext.HL7.GetValueAt("MSH:SendingApplication"))=("CERNER"))&&(((pContext.HL7.GetValueAt("PV1:PatientClass"))=("123"))||##class(Ens.Rule.FunctionSet).StartsWith((pContext.HL7.GetValueAt("PV1:PatientClass")),("BDBD"))||##class(Ens.Rule.FunctionSet).StartsWith((pContext.HL7.GetValueAt("PID:3")),("99")))))&&##class(Ens.Rule.FunctionSet).Exists(("GenderLookup"),(pContext.HL7.GetValueAt("PID:AdministrativeSex")))&&((pContext.HL7.GetValueAt("PID:PatientID.ID"))=("123")))) {
                set pReason=pReason_",rule#3(ADT vers Dictaphone):when#1"
                if (pLogLevel [ "c") set tSC = ##class(Ens.Rule.DebugLog).Log(pDebugId,"c","rule#3(ADT vers Dictaphone):when#1","When (((HL7.{PV1:PatientClass} In ""I,E,O"")||((HL7.{PV1:PatientClass} StartsWith ""I"")&&(HL7.{MSH:SendingApplication}=""CERNER"")&&((HL7.{PV1:PatientClass}=""123"")||(HL7.{PV1:PatientClass} StartsWith ""BDBD"")||(HL7.{PID:3} StartsWith ""99""))))&&Exists(""GenderLookup"",HL7.{PID:AdministrativeSex})&&(HL7.{PID:PatientID.ID}=""123"")) succeeded",0) quit:('tSC)
                set pReturnValue=pReturnValue_$s(pReturnValue'="":";",1:"")_"send:Dictaphone:"
            } elseif (pLogLevel [ "c") {
                set tSC = ##class(Ens.Rule.DebugLog).Log(pDebugId,"c","rule#3(ADT vers Dictaphone)","For rule 'ADT vers Dictaphone', no whens matched and no otherwise defined",0) quit:('tSC)
            }
        }
        ; Evaluating rule: rule#4(ADT To DPI)
        kill tConstraints
        set tSC=##class(EnsLib.HL7.MsgRouter.RuleAssist).RuntimeConstraintCheck(.tConstraints,pContext,.pPassed) quit:('tSC)
        if (pLogLevel [ "c") set tSC = ##class(Ens.Rule.DebugLog).Log(pDebugId,"c","rule#4(ADT To DPI)","Constraints for rule 'ADT To DPI' "_$select(pPassed: "passed",1: "failed"),0) quit:('tSC)
        if pPassed {
            if ((1)) {
                set pReason=pReason_",rule#4(ADT To DPI):when#1"
                if (pLogLevel [ "c") set tSC = ##class(Ens.Rule.DebugLog).Log(pDebugId,"c","rule#4(ADT To DPI):when#1","When (1) succeeded",0) quit:('tSC)
                set pReturnValue=pReturnValue_$s(pReturnValue'="":";",1:"")_"send:DPI:LookupSample.LookupSampleDTL"
            } elseif (pLogLevel [ "c") {
                set tSC = ##class(Ens.Rule.DebugLog).Log(pDebugId,"c","rule#4(ADT To DPI)","For rule 'ADT To DPI', no whens matched and no otherwise defined",0) quit:('tSC)
            }
        }
        quit
        ;
    } catch err {
        if $ZE="" {set tSC=err.AsStatus()} Else {set tSC=##class(Ens.Util.Error).ExceptionStatus()}
    }
    set pReason=$e(pReason,2,*)
    quit tSC
    ;
}